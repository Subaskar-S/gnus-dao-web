(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[3329],{88251:function(){},36027:function(){},85357:function(){},2471:function(n,t,e){"use strict";e.r(t),e.d(t,{closeWalletConnect:function(){return h},disconnectWalletConnect:function(){return b},getWalletConnectAddress:function(){return C},getWalletConnectChainId:function(){return g},getWalletConnectProvider:function(){return d},getWalletConnectState:function(){return f},initializeWalletConnect:function(){return u},openWalletConnect:function(){return s},subscribeToWalletConnect:function(){return w},switchWalletConnectNetwork:function(){return v}});var c=e(49905),o=e(22071);let r=()=>{try{let n=(0,o.dU)().NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID;if(!n||"placeholder"===n||"build-placeholder"===n)throw Error("WalletConnect Project ID is not configured. Please add NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID to your environment variables.");return n}catch(n){if(n instanceof Error)throw n;throw Error("WalletConnect project ID is not configured. Please check your environment variables.")}},a=null,i=!1,l=function(n){for(var t=arguments.length,e=Array(t>1?t-1:0),c=1;c<t;c++)e[c-1]=arguments[c]};async function u(){let n;try{n=r(),l("Using project ID:",n)}catch(n){throw l("Project ID validation failed:",n),n}if(a&&i&&a.connected)return l("Using existing connected provider"),a;try{if(l("Initializing WalletConnect with validated configuration"),a)try{l("Cleaning up existing provider"),await a.disconnect()}catch(n){l("Error cleaning up existing provider:",n)}return l("Creating new EthereumProvider instance..."),a=await c.Gn.init({projectId:n,chains:[8453],optionalChains:[1351057110,137,42161,1],showQrModal:!0,qrModalOptions:{themeMode:"dark",themeVariables:{"--wcm-accent-color":"#3b82f6","--wcm-background-color":"#1a1a1a","--wcm-container-border-radius":"8px"},enableExplorer:!0,explorerRecommendedWalletIds:["c57ca95b47569778a828d19178114f4db188b89b763c899ba0be274e97267d96","fd20dc426fb37566d803205b19bbc1d4096b248ac04548e3cfb6b3a38bd033aa","4622a2b2d6af1c9844944291e5e7351a6aa24cd7b23099efac1b2fd875da31a0"]},metadata:{name:"GNUS DAO Governance",description:"Decentralized governance platform for GNUS DAO community",url:"https://gnus-dao-web.pages.dev/",icons:["/logo.png"]}}),l("Provider initialized successfully:",a),i=!0,a}catch(n){throw l("Failed to initialize WalletConnect:",n),i=!1,a=null,n}}function d(){return a}async function s(){try{var n;l("Opening modal...");let t=await u();if(!t)throw Error("Failed to initialize WalletConnect provider");if(l("Provider initialized, checking connection state..."),l("Provider connected:",t.connected),l("Provider accounts:",t.accounts),l("Provider chainId:",t.chainId),t.connected&&(null===(n=t.accounts)||void 0===n?void 0:n.length)>0)return l("Already connected, returning existing connection"),t;l("Enabling provider (this should show the QR modal)..."),l("Provider showQrModal setting should be true");try{let n=await t.enable();if(l("Provider enabled successfully, accounts:",n),n&&n.length>0)return l("WalletConnect connection successful with accounts:",n),{provider:t,accounts:n};if(l("No accounts returned from enable, trying alternative connection method..."),await t.connect(),t.accounts&&t.accounts.length>0)return l("Alternative connection successful, accounts:",t.accounts),{provider:t,accounts:t.accounts}}catch(n){l("Enable failed, trying connect method:",n);try{if(await t.connect(),t.accounts&&t.accounts.length>0)return l("Connect method successful, accounts:",t.accounts),{provider:t,accounts:t.accounts}}catch(t){throw l("Connect method also failed:",t),n}}throw Error("No accounts returned from WalletConnect")}catch(n){throw l("Failed to open WalletConnect:",n),a=null,i=!1,n}}function h(){}function f(){var n;return a?{isConnected:a.connected||!1,address:(null===(n=a.accounts)||void 0===n?void 0:n[0])||null,chainId:a.chainId||null}:null}function C(){var n;return a&&(null===(n=a.accounts)||void 0===n?void 0:n[0])||null}function g(){return a&&a.chainId||null}async function v(n){if(!a)throw Error("WalletConnect not initialized");try{await a.request({method:"wallet_switchEthereumChain",params:[{chainId:"0x".concat(n.toString(16))}]})}catch(n){throw n}}async function b(){if(a)try{await a.disconnect(),a=null,i=!1}catch(n){throw n}}function w(n){if(!a)return()=>{};let t=["connect","disconnect","chainChanged","accountsChanged"];return t.forEach(t=>{a.on(t,e=>n(t,e))}),()=>{t.forEach(n=>{a.removeAllListeners(n)})}}}}]);