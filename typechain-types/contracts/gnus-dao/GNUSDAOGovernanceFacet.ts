/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace GNUSDAOGovernanceFacet {
  export type VotingConfigStruct = {
    proposalThreshold: BigNumberish;
    votingDelay: BigNumberish;
    votingPeriod: BigNumberish;
    quorumThreshold: BigNumberish;
    maxVotesPerWallet: BigNumberish;
    proposalCooldown: BigNumberish;
  };

  export type VotingConfigStructOutput = [
    proposalThreshold: bigint,
    votingDelay: bigint,
    votingPeriod: bigint,
    quorumThreshold: bigint,
    maxVotesPerWallet: bigint,
    proposalCooldown: bigint
  ] & {
    proposalThreshold: bigint;
    votingDelay: bigint;
    votingPeriod: bigint;
    quorumThreshold: bigint;
    maxVotesPerWallet: bigint;
    proposalCooldown: bigint;
  };
}

export interface GNUSDAOGovernanceFacetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addTreasuryManager"
      | "cancelProposal"
      | "delegateVotes"
      | "depositToTreasury"
      | "executeProposal"
      | "getDelegatedTo"
      | "getDelegatedVotes"
      | "getProposalBasic"
      | "getProposalCount"
      | "getProposalStatus"
      | "getTreasuryBalance"
      | "getVote"
      | "getVotingConfig"
      | "hasVoted"
      | "initializeGovernance"
      | "isTreasuryManager"
      | "owner"
      | "paused"
      | "propose"
      | "removeTreasuryManager"
      | "renounceOwnership"
      | "revokeDelegation"
      | "transferOwnership"
      | "vote"
      | "withdrawFromTreasury"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "Paused"
      | "ProposalCancelled"
      | "ProposalCreated"
      | "ProposalExecuted"
      | "TreasuryDeposit"
      | "TreasuryWithdrawal"
      | "Unpaused"
      | "VoteCast"
      | "VoteDelegated"
      | "VoteDelegationRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addTreasuryManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateVotes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositToTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegatedTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegatedVotes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalBasic",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTreasuryBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVote",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeGovernance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isTreasuryManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "propose",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTreasuryManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeDelegation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromTreasury",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addTreasuryManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositToTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegatedTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegatedVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalBasic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreasuryBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVotingConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTreasuryManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeTreasuryManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromTreasury",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalCancelledEvent {
  export type InputTuple = [proposalId: BigNumberish];
  export type OutputTuple = [proposalId: bigint];
  export interface OutputObject {
    proposalId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalCreatedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    proposer: AddressLike,
    title: string,
    ipfsHash: string,
    startTime: BigNumberish,
    endTime: BigNumberish
  ];
  export type OutputTuple = [
    proposalId: bigint,
    proposer: string,
    title: string,
    ipfsHash: string,
    startTime: bigint,
    endTime: bigint
  ];
  export interface OutputObject {
    proposalId: bigint;
    proposer: string;
    title: string;
    ipfsHash: string;
    startTime: bigint;
    endTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalExecutedEvent {
  export type InputTuple = [proposalId: BigNumberish];
  export type OutputTuple = [proposalId: bigint];
  export interface OutputObject {
    proposalId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TreasuryDepositEvent {
  export type InputTuple = [from: AddressLike, amount: BigNumberish];
  export type OutputTuple = [from: string, amount: bigint];
  export interface OutputObject {
    from: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TreasuryWithdrawalEvent {
  export type InputTuple = [to: AddressLike, amount: BigNumberish];
  export type OutputTuple = [to: string, amount: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    voter: AddressLike,
    votes: BigNumberish,
    tokensCost: BigNumberish
  ];
  export type OutputTuple = [
    proposalId: bigint,
    voter: string,
    votes: bigint,
    tokensCost: bigint
  ];
  export interface OutputObject {
    proposalId: bigint;
    voter: string;
    votes: bigint;
    tokensCost: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteDelegatedEvent {
  export type InputTuple = [delegator: AddressLike, delegatee: AddressLike];
  export type OutputTuple = [delegator: string, delegatee: string];
  export interface OutputObject {
    delegator: string;
    delegatee: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteDelegationRevokedEvent {
  export type InputTuple = [delegator: AddressLike, delegatee: AddressLike];
  export type OutputTuple = [delegator: string, delegatee: string];
  export interface OutputObject {
    delegator: string;
    delegatee: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GNUSDAOGovernanceFacet extends BaseContract {
  connect(runner?: ContractRunner | null): GNUSDAOGovernanceFacet;
  waitForDeployment(): Promise<this>;

  interface: GNUSDAOGovernanceFacetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addTreasuryManager: TypedContractMethod<
    [manager: AddressLike],
    [void],
    "nonpayable"
  >;

  cancelProposal: TypedContractMethod<
    [proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  delegateVotes: TypedContractMethod<
    [delegatee: AddressLike],
    [void],
    "nonpayable"
  >;

  depositToTreasury: TypedContractMethod<[], [void], "payable">;

  executeProposal: TypedContractMethod<
    [proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getDelegatedTo: TypedContractMethod<[account: AddressLike], [string], "view">;

  getDelegatedVotes: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  getProposalBasic: TypedContractMethod<
    [proposalId: BigNumberish],
    [
      [bigint, string, string, string] & {
        id: bigint;
        proposer: string;
        title: string;
        ipfsHash: string;
      }
    ],
    "view"
  >;

  getProposalCount: TypedContractMethod<[], [bigint], "view">;

  getProposalStatus: TypedContractMethod<
    [proposalId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, boolean, boolean] & {
        startTime: bigint;
        endTime: bigint;
        totalVotes: bigint;
        totalVoters: bigint;
        executed: boolean;
        cancelled: boolean;
      }
    ],
    "view"
  >;

  getTreasuryBalance: TypedContractMethod<[], [bigint], "view">;

  getVote: TypedContractMethod<
    [proposalId: BigNumberish, voter: AddressLike],
    [bigint],
    "view"
  >;

  getVotingConfig: TypedContractMethod<
    [],
    [GNUSDAOGovernanceFacet.VotingConfigStructOutput],
    "view"
  >;

  hasVoted: TypedContractMethod<
    [proposalId: BigNumberish, voter: AddressLike],
    [boolean],
    "view"
  >;

  initializeGovernance: TypedContractMethod<
    [_initialOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  isTreasuryManager: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  propose: TypedContractMethod<
    [title: string, ipfsHash: string],
    [bigint],
    "nonpayable"
  >;

  removeTreasuryManager: TypedContractMethod<
    [manager: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  revokeDelegation: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  vote: TypedContractMethod<
    [proposalId: BigNumberish, votes: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawFromTreasury: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addTreasuryManager"
  ): TypedContractMethod<[manager: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cancelProposal"
  ): TypedContractMethod<[proposalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "delegateVotes"
  ): TypedContractMethod<[delegatee: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "depositToTreasury"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "executeProposal"
  ): TypedContractMethod<[proposalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getDelegatedTo"
  ): TypedContractMethod<[account: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getDelegatedVotes"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getProposalBasic"
  ): TypedContractMethod<
    [proposalId: BigNumberish],
    [
      [bigint, string, string, string] & {
        id: bigint;
        proposer: string;
        title: string;
        ipfsHash: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProposalCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getProposalStatus"
  ): TypedContractMethod<
    [proposalId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, boolean, boolean] & {
        startTime: bigint;
        endTime: bigint;
        totalVotes: bigint;
        totalVoters: bigint;
        executed: boolean;
        cancelled: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTreasuryBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVote"
  ): TypedContractMethod<
    [proposalId: BigNumberish, voter: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVotingConfig"
  ): TypedContractMethod<
    [],
    [GNUSDAOGovernanceFacet.VotingConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasVoted"
  ): TypedContractMethod<
    [proposalId: BigNumberish, voter: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initializeGovernance"
  ): TypedContractMethod<[_initialOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isTreasuryManager"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "propose"
  ): TypedContractMethod<
    [title: string, ipfsHash: string],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeTreasuryManager"
  ): TypedContractMethod<[manager: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeDelegation"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [proposalId: BigNumberish, votes: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawFromTreasury"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalCancelled"
  ): TypedContractEvent<
    ProposalCancelledEvent.InputTuple,
    ProposalCancelledEvent.OutputTuple,
    ProposalCancelledEvent.OutputObject
  >;
  getEvent(
    key: "ProposalCreated"
  ): TypedContractEvent<
    ProposalCreatedEvent.InputTuple,
    ProposalCreatedEvent.OutputTuple,
    ProposalCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalExecuted"
  ): TypedContractEvent<
    ProposalExecutedEvent.InputTuple,
    ProposalExecutedEvent.OutputTuple,
    ProposalExecutedEvent.OutputObject
  >;
  getEvent(
    key: "TreasuryDeposit"
  ): TypedContractEvent<
    TreasuryDepositEvent.InputTuple,
    TreasuryDepositEvent.OutputTuple,
    TreasuryDepositEvent.OutputObject
  >;
  getEvent(
    key: "TreasuryWithdrawal"
  ): TypedContractEvent<
    TreasuryWithdrawalEvent.InputTuple,
    TreasuryWithdrawalEvent.OutputTuple,
    TreasuryWithdrawalEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;
  getEvent(
    key: "VoteDelegated"
  ): TypedContractEvent<
    VoteDelegatedEvent.InputTuple,
    VoteDelegatedEvent.OutputTuple,
    VoteDelegatedEvent.OutputObject
  >;
  getEvent(
    key: "VoteDelegationRevoked"
  ): TypedContractEvent<
    VoteDelegationRevokedEvent.InputTuple,
    VoteDelegationRevokedEvent.OutputTuple,
    VoteDelegationRevokedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "ProposalCancelled(uint256)": TypedContractEvent<
      ProposalCancelledEvent.InputTuple,
      ProposalCancelledEvent.OutputTuple,
      ProposalCancelledEvent.OutputObject
    >;
    ProposalCancelled: TypedContractEvent<
      ProposalCancelledEvent.InputTuple,
      ProposalCancelledEvent.OutputTuple,
      ProposalCancelledEvent.OutputObject
    >;

    "ProposalCreated(uint256,address,string,string,uint256,uint256)": TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;
    ProposalCreated: TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;

    "ProposalExecuted(uint256)": TypedContractEvent<
      ProposalExecutedEvent.InputTuple,
      ProposalExecutedEvent.OutputTuple,
      ProposalExecutedEvent.OutputObject
    >;
    ProposalExecuted: TypedContractEvent<
      ProposalExecutedEvent.InputTuple,
      ProposalExecutedEvent.OutputTuple,
      ProposalExecutedEvent.OutputObject
    >;

    "TreasuryDeposit(address,uint256)": TypedContractEvent<
      TreasuryDepositEvent.InputTuple,
      TreasuryDepositEvent.OutputTuple,
      TreasuryDepositEvent.OutputObject
    >;
    TreasuryDeposit: TypedContractEvent<
      TreasuryDepositEvent.InputTuple,
      TreasuryDepositEvent.OutputTuple,
      TreasuryDepositEvent.OutputObject
    >;

    "TreasuryWithdrawal(address,uint256)": TypedContractEvent<
      TreasuryWithdrawalEvent.InputTuple,
      TreasuryWithdrawalEvent.OutputTuple,
      TreasuryWithdrawalEvent.OutputObject
    >;
    TreasuryWithdrawal: TypedContractEvent<
      TreasuryWithdrawalEvent.InputTuple,
      TreasuryWithdrawalEvent.OutputTuple,
      TreasuryWithdrawalEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "VoteCast(uint256,address,uint256,uint256)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;

    "VoteDelegated(address,address)": TypedContractEvent<
      VoteDelegatedEvent.InputTuple,
      VoteDelegatedEvent.OutputTuple,
      VoteDelegatedEvent.OutputObject
    >;
    VoteDelegated: TypedContractEvent<
      VoteDelegatedEvent.InputTuple,
      VoteDelegatedEvent.OutputTuple,
      VoteDelegatedEvent.OutputObject
    >;

    "VoteDelegationRevoked(address,address)": TypedContractEvent<
      VoteDelegationRevokedEvent.InputTuple,
      VoteDelegationRevokedEvent.OutputTuple,
      VoteDelegationRevokedEvent.OutputObject
    >;
    VoteDelegationRevoked: TypedContractEvent<
      VoteDelegationRevokedEvent.InputTuple,
      VoteDelegationRevokedEvent.OutputTuple,
      VoteDelegationRevokedEvent.OutputObject
    >;
  };
}
