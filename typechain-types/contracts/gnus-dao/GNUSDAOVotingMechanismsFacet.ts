/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace GNUSDAOVotingMechanismsFacet {
  export type QuadraticVoteDataStruct = {
    votes: BigNumberish;
    cost: BigNumberish;
    voter: AddressLike;
  };

  export type QuadraticVoteDataStructOutput = [
    votes: bigint,
    cost: bigint,
    voter: string
  ] & { votes: bigint; cost: bigint; voter: string };

  export type VoteAnalysisStruct = {
    totalVotes: BigNumberish;
    totalVoters: BigNumberish;
    totalTokensSpent: BigNumberish;
    averageVotesPerVoter: BigNumberish;
    medianVotesPerVoter: BigNumberish;
    giniCoefficient: BigNumberish;
  };

  export type VoteAnalysisStructOutput = [
    totalVotes: bigint,
    totalVoters: bigint,
    totalTokensSpent: bigint,
    averageVotesPerVoter: bigint,
    medianVotesPerVoter: bigint,
    giniCoefficient: bigint
  ] & {
    totalVotes: bigint;
    totalVoters: bigint;
    totalTokensSpent: bigint;
    averageVotesPerVoter: bigint;
    medianVotesPerVoter: bigint;
    giniCoefficient: bigint;
  };
}

export interface GNUSDAOVotingMechanismsFacetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "analyzeVoteDistribution"
      | "calculateMaxVotes"
      | "calculateOptimalVotes"
      | "calculateParticipationRate"
      | "calculateQuadraticCost"
      | "calculateSybilResistanceScore"
      | "calculateVoteWeight"
      | "checkQuorum"
      | "getVoteEfficiency"
      | "validateVote"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "analyzeVoteDistribution",
    values: [GNUSDAOVotingMechanismsFacet.QuadraticVoteDataStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateMaxVotes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateOptimalVotes",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateParticipationRate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateQuadraticCost",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSybilResistanceScore",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateVoteWeight",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkQuorum",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoteEfficiency",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateVote",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "analyzeVoteDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateMaxVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateOptimalVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateParticipationRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateQuadraticCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateSybilResistanceScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateVoteWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkQuorum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoteEfficiency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateVote",
    data: BytesLike
  ): Result;
}

export interface GNUSDAOVotingMechanismsFacet extends BaseContract {
  connect(runner?: ContractRunner | null): GNUSDAOVotingMechanismsFacet;
  waitForDeployment(): Promise<this>;

  interface: GNUSDAOVotingMechanismsFacetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  analyzeVoteDistribution: TypedContractMethod<
    [voteData: GNUSDAOVotingMechanismsFacet.QuadraticVoteDataStruct[]],
    [GNUSDAOVotingMechanismsFacet.VoteAnalysisStructOutput],
    "view"
  >;

  calculateMaxVotes: TypedContractMethod<
    [tokenBalance: BigNumberish],
    [bigint],
    "view"
  >;

  calculateOptimalVotes: TypedContractMethod<
    [tokenBudget: BigNumberish, maxVotesPerWallet: BigNumberish],
    [[bigint, bigint] & { optimalVotes: bigint; remainingTokens: bigint }],
    "view"
  >;

  calculateParticipationRate: TypedContractMethod<
    [voters: BigNumberish, eligibleVoters: BigNumberish],
    [bigint],
    "view"
  >;

  calculateQuadraticCost: TypedContractMethod<
    [votes: BigNumberish],
    [bigint],
    "view"
  >;

  calculateSybilResistanceScore: TypedContractMethod<
    [
      totalVoters: BigNumberish,
      totalTokensSpent: BigNumberish,
      maxTokensPerVoter: BigNumberish
    ],
    [bigint],
    "view"
  >;

  calculateVoteWeight: TypedContractMethod<
    [tokensCost: BigNumberish],
    [bigint],
    "view"
  >;

  checkQuorum: TypedContractMethod<
    [totalVotes: BigNumberish, quorumThreshold: BigNumberish],
    [boolean],
    "view"
  >;

  getVoteEfficiency: TypedContractMethod<
    [votes: BigNumberish, tokensCost: BigNumberish],
    [bigint],
    "view"
  >;

  validateVote: TypedContractMethod<
    [
      votes: BigNumberish,
      maxVotesPerWallet: BigNumberish,
      tokenBalance: BigNumberish
    ],
    [[boolean, bigint] & { valid: boolean; cost: bigint }],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "analyzeVoteDistribution"
  ): TypedContractMethod<
    [voteData: GNUSDAOVotingMechanismsFacet.QuadraticVoteDataStruct[]],
    [GNUSDAOVotingMechanismsFacet.VoteAnalysisStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateMaxVotes"
  ): TypedContractMethod<[tokenBalance: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateOptimalVotes"
  ): TypedContractMethod<
    [tokenBudget: BigNumberish, maxVotesPerWallet: BigNumberish],
    [[bigint, bigint] & { optimalVotes: bigint; remainingTokens: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateParticipationRate"
  ): TypedContractMethod<
    [voters: BigNumberish, eligibleVoters: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateQuadraticCost"
  ): TypedContractMethod<[votes: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateSybilResistanceScore"
  ): TypedContractMethod<
    [
      totalVoters: BigNumberish,
      totalTokensSpent: BigNumberish,
      maxTokensPerVoter: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateVoteWeight"
  ): TypedContractMethod<[tokensCost: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "checkQuorum"
  ): TypedContractMethod<
    [totalVotes: BigNumberish, quorumThreshold: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVoteEfficiency"
  ): TypedContractMethod<
    [votes: BigNumberish, tokensCost: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "validateVote"
  ): TypedContractMethod<
    [
      votes: BigNumberish,
      maxVotesPerWallet: BigNumberish,
      tokenBalance: BigNumberish
    ],
    [[boolean, bigint] & { valid: boolean; cost: bigint }],
    "view"
  >;

  filters: {};
}
