/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControlEnumerableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlEnumerableUpgradeable__factory>;
    getContractFactory(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlUpgradeable__factory>;
    getContractFactory(
      name: "IAccessControlEnumerableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlEnumerableUpgradeable__factory>;
    getContractFactory(
      name: "IAccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlUpgradeable__factory>;
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "PausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableUpgradeable__factory>;
    getContractFactory(
      name: "IERC1155Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Upgradeable__factory>;
    getContractFactory(
      name: "IERC20MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ERC165StorageUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165StorageUpgradeable__factory>;
    getContractFactory(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165Upgradeable__factory>;
    getContractFactory(
      name: "Diamond",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Diamond__factory>;
    getContractFactory(
      name: "DiamondCutFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DiamondCutFacet__factory>;
    getContractFactory(
      name: "DiamondLoupeFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DiamondLoupeFacet__factory>;
    getContractFactory(
      name: "IDiamondCut",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDiamondCut__factory>;
    getContractFactory(
      name: "IDiamondLoupe",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDiamondLoupe__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "IERC173",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC173__factory>;
    getContractFactory(
      name: "LibDiamond",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibDiamond__factory>;
    getContractFactory(
      name: "GNUSDAOAccessControlFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GNUSDAOAccessControlFacet__factory>;
    getContractFactory(
      name: "GNUSDAODiamond",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GNUSDAODiamond__factory>;
    getContractFactory(
      name: "GNUSDAOGovernanceFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GNUSDAOGovernanceFacet__factory>;
    getContractFactory(
      name: "GNUSDAOGovernanceTokenFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GNUSDAOGovernanceTokenFacet__factory>;
    getContractFactory(
      name: "GNUSDAOInitFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GNUSDAOInitFacet__factory>;
    getContractFactory(
      name: "GNUSDAOOwnershipFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GNUSDAOOwnershipFacet__factory>;
    getContractFactory(
      name: "GNUSDAOValueFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GNUSDAOValueFacet__factory>;
    getContractFactory(
      name: "GNUSDAOVotingMechanismsFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GNUSDAOVotingMechanismsFacet__factory>;

    getContractAt(
      name: "AccessControlEnumerableUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlEnumerableUpgradeable>;
    getContractAt(
      name: "AccessControlUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlUpgradeable>;
    getContractAt(
      name: "IAccessControlEnumerableUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlEnumerableUpgradeable>;
    getContractAt(
      name: "IAccessControlUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlUpgradeable>;
    getContractAt(
      name: "OwnableUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "PausableUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableUpgradeable>;
    getContractAt(
      name: "IERC1155Upgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Upgradeable>;
    getContractAt(
      name: "IERC20MetadataUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ERC165StorageUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165StorageUpgradeable>;
    getContractAt(
      name: "ERC165Upgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: "IERC165Upgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165Upgradeable>;
    getContractAt(
      name: "Diamond",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Diamond>;
    getContractAt(
      name: "DiamondCutFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DiamondCutFacet>;
    getContractAt(
      name: "DiamondLoupeFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DiamondLoupeFacet>;
    getContractAt(
      name: "IDiamondCut",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDiamondCut>;
    getContractAt(
      name: "IDiamondLoupe",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDiamondLoupe>;
    getContractAt(
      name: "IERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "IERC173",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC173>;
    getContractAt(
      name: "LibDiamond",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LibDiamond>;
    getContractAt(
      name: "GNUSDAOAccessControlFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GNUSDAOAccessControlFacet>;
    getContractAt(
      name: "GNUSDAODiamond",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GNUSDAODiamond>;
    getContractAt(
      name: "GNUSDAOGovernanceFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GNUSDAOGovernanceFacet>;
    getContractAt(
      name: "GNUSDAOGovernanceTokenFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GNUSDAOGovernanceTokenFacet>;
    getContractAt(
      name: "GNUSDAOInitFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GNUSDAOInitFacet>;
    getContractAt(
      name: "GNUSDAOOwnershipFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GNUSDAOOwnershipFacet>;
    getContractAt(
      name: "GNUSDAOValueFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GNUSDAOValueFacet>;
    getContractAt(
      name: "GNUSDAOVotingMechanismsFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GNUSDAOVotingMechanismsFacet>;

    deployContract(
      name: "AccessControlEnumerableUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControlEnumerableUpgradeable>;
    deployContract(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControlUpgradeable>;
    deployContract(
      name: "IAccessControlEnumerableUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControlEnumerableUpgradeable>;
    deployContract(
      name: "IAccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControlUpgradeable>;
    deployContract(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OwnableUpgradeable>;
    deployContract(
      name: "PausableUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PausableUpgradeable>;
    deployContract(
      name: "IERC1155Upgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Upgradeable>;
    deployContract(
      name: "IERC20MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    deployContract(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Upgradeable>;
    deployContract(
      name: "ERC165StorageUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165StorageUpgradeable>;
    deployContract(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165Upgradeable>;
    deployContract(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165Upgradeable>;
    deployContract(
      name: "Diamond",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Diamond>;
    deployContract(
      name: "DiamondCutFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondCutFacet>;
    deployContract(
      name: "DiamondLoupeFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondLoupeFacet>;
    deployContract(
      name: "IDiamondCut",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDiamondCut>;
    deployContract(
      name: "IDiamondLoupe",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDiamondLoupe>;
    deployContract(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "IERC173",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC173>;
    deployContract(
      name: "LibDiamond",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LibDiamond>;
    deployContract(
      name: "GNUSDAOAccessControlFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GNUSDAOAccessControlFacet>;
    deployContract(
      name: "GNUSDAODiamond",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GNUSDAODiamond>;
    deployContract(
      name: "GNUSDAOGovernanceFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GNUSDAOGovernanceFacet>;
    deployContract(
      name: "GNUSDAOGovernanceTokenFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GNUSDAOGovernanceTokenFacet>;
    deployContract(
      name: "GNUSDAOInitFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GNUSDAOInitFacet>;
    deployContract(
      name: "GNUSDAOOwnershipFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GNUSDAOOwnershipFacet>;
    deployContract(
      name: "GNUSDAOValueFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GNUSDAOValueFacet>;
    deployContract(
      name: "GNUSDAOVotingMechanismsFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GNUSDAOVotingMechanismsFacet>;

    deployContract(
      name: "AccessControlEnumerableUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControlEnumerableUpgradeable>;
    deployContract(
      name: "AccessControlUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControlUpgradeable>;
    deployContract(
      name: "IAccessControlEnumerableUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControlEnumerableUpgradeable>;
    deployContract(
      name: "IAccessControlUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControlUpgradeable>;
    deployContract(
      name: "OwnableUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OwnableUpgradeable>;
    deployContract(
      name: "PausableUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PausableUpgradeable>;
    deployContract(
      name: "IERC1155Upgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Upgradeable>;
    deployContract(
      name: "IERC20MetadataUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    deployContract(
      name: "IERC20Upgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Upgradeable>;
    deployContract(
      name: "ERC165StorageUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165StorageUpgradeable>;
    deployContract(
      name: "ERC165Upgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165Upgradeable>;
    deployContract(
      name: "IERC165Upgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165Upgradeable>;
    deployContract(
      name: "Diamond",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Diamond>;
    deployContract(
      name: "DiamondCutFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondCutFacet>;
    deployContract(
      name: "DiamondLoupeFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondLoupeFacet>;
    deployContract(
      name: "IDiamondCut",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDiamondCut>;
    deployContract(
      name: "IDiamondLoupe",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDiamondLoupe>;
    deployContract(
      name: "IERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "IERC173",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC173>;
    deployContract(
      name: "LibDiamond",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LibDiamond>;
    deployContract(
      name: "GNUSDAOAccessControlFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GNUSDAOAccessControlFacet>;
    deployContract(
      name: "GNUSDAODiamond",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GNUSDAODiamond>;
    deployContract(
      name: "GNUSDAOGovernanceFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GNUSDAOGovernanceFacet>;
    deployContract(
      name: "GNUSDAOGovernanceTokenFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GNUSDAOGovernanceTokenFacet>;
    deployContract(
      name: "GNUSDAOInitFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GNUSDAOInitFacet>;
    deployContract(
      name: "GNUSDAOOwnershipFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GNUSDAOOwnershipFacet>;
    deployContract(
      name: "GNUSDAOValueFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GNUSDAOValueFacet>;
    deployContract(
      name: "GNUSDAOVotingMechanismsFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GNUSDAOVotingMechanismsFacet>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
